/*
The data type uuid stores Universally Unique Identifiers (UUID). (Some systems refer to this data type as a globally unique
identifier, or GUID, instead).

This identifier is a 128-bit quantity that is generated by an algorithm chosen to make it very unlikely that the same
identifier will be generated by anyone else in the known universe using the same algorithm.

Therefore, for distributed systems, these identifiers provide a better uniqueness guarantee than sequence generators, which
are only unique within a single database.

A UUID is written as a sequence of lower-case hexadecimal digits, in several groups separated by hyphens, 
specifically a group of 8 digits followed by three groups of 4 digits followed by a group of 12 digits, for a total of 32
digits representing the 128 bits. 

An example of a UUID in this standard form is:
a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11

PostgreSQL also accepts the following alternative forms for input: use of upper-case digits, the standard format surrounded 
by braces, omitting some or all hyphens, adding a hyphen after any group of four digits. 

Examples are:
A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11
{a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11}
a0eebc999c0b4ef8bb6d6bb9bd380a11
a0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11
{a0eebc99-9c0b4ef8-bb6d6bb9-bd380a11}

PostgreSQL allows you store and compare UUID values but it does not include functions for generating the UUID values 
in its core.

Instead, it relies on the third-party modules that provide specific algorithms to generate UUIDs. 
For example the uuid-ossp module provides some handy functions that implement standard algorithms for generating UUIDs.

To install the uuid-ossp module, you use the CREATE EXTENSION statement as follows:

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

To generate the UUID values based on the combination of computer’s MAC address, current timestamp, and a random value, 
you use the uuid_generate_v1() function:

SELECT uuid_generate_v1();

If you want to generate a UUID value solely based on random numbers, you can use the uuid_generate_v4() function. 
For example:

SELECT uuid_generate_v4();

Advantages of using UUID in PostgreSQL

- PostgreSQL UUID data type used to generate a sequential number.
- The UUID data type is more unique as compared to the serial data type.
- The UUID data type will generate a 32-bit sequential value, so it is more unique.
- Performance is faster than other serial data types.
- We can use an alternate function to create a UUID.

Why UUID?

Exposing information: Very frequently, the primary id is exposed to the user (REST urls, anyone?). If the primary key is easily
visible to the user, this means that anyone can find out your number of users by just looking at the primary key on a freshly created user. This leaks information about the size of your userbase.

Enumeration of entries: Another problem is that it’s very easy to enumerate all the entries of your table with a primary key.
A malicious user or a bot could easily scrape identities of all your users, or spam your API with organised actions on all your 
users. A UUID is universally random, and is practically impossible for external parties to predict. To be very clear though, UUIDs are not a security mechanism, the actual solution to this problem is to put up stronger access control. 
UUIDs just provide more protection in this case.
Independent Generation: The biggest problem with sequential ids is that the client doesn’t know the id of an object
being inserted without talking to the database. This is even more of a problem when inserting multiple related objects withforeign keys, and creates inelegant multi step inserts. A UUID on the other hand, can be generated directly by the client making inserts very simple, and solves the foreign key problem quite nicely too.
Random distribution: The random distribution of the UUIDs can prevent disk hotspots, where a large number of objects are
stored in a particular disk block, causing high usage on specific areas of the disk. This works very well for databases distributed over several nodes.

Why not UUID?

Size: The downside is that UUIDs are four times as big as a serial, and if you have size constraints, they can be a problem.
Hard to debug: Harder to remember, hard to debug, a small but important QoL issue. It’s easier to test/debug when you have simpler ids that you can remember compared to long complicated UUIDs.
Lack of easy ordering: The primary key cannot be used to determine the order of insertion, another column with timestamps or
a sequence becomes necessary. This also means that clustered indexes on UUID columns are very costly in terms of performance.
Performance: And also, random UUIDs mean scattered indexes, and this can cause performance issues/high disk usage with 
high insert rates. (Databases have sequential UUID generation functions to deal with this, but this eliminates the advantage
of being able to generate the UUID on the client)
*/

-- Creating a table with UUID column
CREATE TABLE contacts (
    contact_id uuid DEFAULT uuid_generate_v4(),
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    phone VARCHAR,
    PRIMARY KEY (contact_id)
);

-- use  
\d+ contacts


--  insert some data into the contacts table:

INSERT INTO contacts (
	first_name
	,last_name
	,email
	,phone
	)
VALUES (
	'John'
	,'Smith'
	,'john.smith@example.com'
	,'408-237-2345'
	)
	,(
	'Jane'
	,'Smith'
	,'jane.smith@example.com'
	,'408-237-2344'
	)
	,(
	'Alex'
	,'Smith'
	,'alex.smith@example.com'
	,'408-237-2343'
	);

-- select all rows in the contacts table 
SELECT * FROM contacts;