/*
Character Types

(1) character varying(n), varchar(n)	variable-length with limit
(2) character(n), char(n)		fixed-length, blank padded
(3) text				variable unlimited length

SQL defines two primary character types: character varying(n) and character(n), where n is a positive integer. 

Both of these types can store strings up to n characters (not bytes) in length. 

An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all
spaces, in which case the string will be truncated to the maximum length. 

If the string to be stored is shorter than the declared length,
- values of type character will be space-padded;
- values of type character varying will simply store the shorter string.

If one explicitly casts a value to character varying(n) or character(n), then an over-length value will be truncated to 
n characters without raising an error.

The notations varchar(n) and char(n) are aliases for character varying(n) and character(n), respectively. 

Note: character without length specifier is equivalent to character(1).
If character varying is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL
extension.

In addition, PostgreSQL provides the text type, which stores strings of any length. Although the type text is not in the 
SQL standard, several other SQL database management systems have it as well.

Values of type character are physically padded with spaces to the specified width n, and are stored and displayed that way.
However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type character.

Tip
There is no performance difference among these three types, apart from increased storage space when using the blank-padded
type, and a few extra CPU cycles to check the length when storing into a length-constrained column. 

While character(n) has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact character(n) is usually the slowest of the three because of its additional storage costs. 

In most situations text or character varying should be used instead.
*/

-- Using the Character Types
CREATE TABLE test1 (a character(4));
INSERT INTO test1 VALUES ('ok');
SELECT a, char_length(a) FROM test1;


CREATE TABLE test2 (b varchar(5));
INSERT INTO test2 VALUES ('ok');
INSERT INTO test2 VALUES ('good      ');
INSERT INTO test2 VALUES ('too long');
ERROR:  value too long for type character varying(5)
INSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation
SELECT b, char_length(b) FROM test2;

